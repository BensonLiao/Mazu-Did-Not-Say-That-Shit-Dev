{"version":3,"sources":["components/FeedbackCount.tsx","components/ReactionSummary.tsx","containers/DisplayReactSummary.ts","components/CommentAndShareSummary.tsx","containers/DisplayCommentAndShareSummary.ts","components/FeedbackSummary.tsx"],"names":["FeedbackCountWrapper","styled","span","styledTooltipOverrideStyle","displayBlock","FeedbackCount","forTip","forText","type","tooltipId","toLowerCase","data-for","data-tip","StyledTooltip","id","effect","multiline","displayName","defaultProps","ReactionSummaryWrapper","div","isFetching","displayFlex","alignCenter","withComponent","WITH_COMPONENT","DEFAULT","ReactionSummary","reactionIds","reactions","reactionArray","map","reactionSummary","dataSummary","getReactionSummary","length","ReactionTopMostIcon","reactFeeling","topMost","feeling","countSummary","topMostTip","secondMost","total","ReactionSecondMostIcon","secondMostTip","thirdMost","ReactionThirdMostIcon","thirdMostTip","all","connect","state","getReactionIsFetching","getReactionIds","getReactions","summaryFeedbacks","feedbacks","summary","textFormat","getFeedbacksCount","getFeedbacksCountTip","CommentAndShareSummaryWrapper","SharesWrapper","CommentAndShareSummary","commentIds","comments","shareIds","shares","commentArray","shareArray","commentsSummary","FEEDBACK_TYPE","COMMENT","sharesSummary","SHARE","getCommentIsFetching","getShareIsFetching","getCommentIds","getComments","getShareIds","getShares","FeedbackSummaryWrapper","justifyContentSpaceBetween","cssConst","infoColorGray","postSectionBorder","FeedbackSummary","DisplayReactSummary","DisplayCommentAndShareSummary"],"mappings":"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","file":"static/js/5.d60be82d.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport StyledTooltip from './StyledTooltip'\nimport { displayBlock } from '../styles/page'\nimport { styledTooltipOverrideStyle } from '../styles/post'\n\nconst FeedbackCountWrapper = styled.span`\n  ${styledTooltipOverrideStyle}\n  ${displayBlock}\n  line-height: 16px;\n  max-height: 16px;\n  cursor: pointer;\n  &:hover {\n    text-decoration: underline;\n  }\n`\n\nconst FeedbackCount = ({ forTip, forText, type }) => {\n  const tooltipId = `tip-for-post-${type.toLowerCase()}-count`\n  return (\n    <FeedbackCountWrapper data-for={tooltipId} data-tip={forTip}>\n      {forText}\n      <StyledTooltip id={tooltipId} effect=\"solid\" multiline />\n    </FeedbackCountWrapper>\n  )\n}\n\nFeedbackCount.displayName = 'FeedbackCount'\n\nFeedbackCount.propTypes = {\n  forTip: PropTypes.string.isRequired,\n  forText: PropTypes.string.isRequired,\n  type: PropTypes.string\n}\n\nFeedbackCount.defaultProps = {\n  type: 'reaction'\n}\n\nexport default FeedbackCount\n","import React from 'react'\n// import PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport { displayFlex, alignCenter } from '../styles'\nimport { styledTooltipOverrideStyle } from '../styles/post'\nimport { WITH_COMPONENT } from '../utils/constants'\nimport dataSummary from '../utils/dataSummary'\nimport { ReactDataState } from '../reducers/types'\nimport FeedbackCount from './FeedbackCount'\nimport ReactionTopMostIcon from './ReactionTopMostIcon'\nimport ReactionSecondMostIcon from './ReactionSecondMostIcon'\nimport ReactionThirdMostIcon from './ReactionThirdMostIcon'\n\ninterface StyledComponentProps {\n  isFetching: boolean\n}\n\nconst ReactionSummaryWrapper = styled.div<StyledComponentProps>`\n  ${({ isFetching }) => isFetching && 'display: none;'}\n  ${displayFlex}\n  ${alignCenter}\n  ${styledTooltipOverrideStyle}\n  min-width: 100px;\n`\n\nconst withComponent = WITH_COMPONENT.DEFAULT\n\ninterface ReactionSummaryProps {\n  isFetching: boolean\n  reactionIds: Array<string>\n  reactions: ReactDataState\n}\n\nconst ReactionSummary: React.FC<ReactionSummaryProps> = ({\n  isFetching,\n  reactionIds,\n  reactions\n}) => {\n  const reactionArray = reactionIds.map(id => reactions[id])\n  const reactionSummary = dataSummary.getReactionSummary(reactionArray)\n  return (\n    reactionIds.length > 0 && (\n      <ReactionSummaryWrapper isFetching={isFetching}>\n        <ReactionTopMostIcon\n          reactFeeling={reactionSummary.topMost.feeling}\n          withComponent={withComponent}\n          countSummary={reactionSummary.topMostTip}\n        />\n        {reactionSummary.secondMost.total > 0 && (\n          <ReactionSecondMostIcon\n            reactFeeling={reactionSummary.secondMost.feeling}\n            withComponent={withComponent}\n            countSummary={reactionSummary.secondMostTip}\n          />\n        )}\n        {reactionSummary.thirdMost.total > 0 && (\n          <ReactionThirdMostIcon\n            reactFeeling={reactionSummary.thirdMost.feeling}\n            withComponent={withComponent}\n            countSummary={reactionSummary.thirdMostTip}\n          />\n        )}\n        <FeedbackCount\n          forText={reactionSummary.all.forText}\n          forTip={reactionSummary.all.forTip}\n        />\n      </ReactionSummaryWrapper>\n    )\n  )\n}\n\n// ReactionSummary.propTypes = {\n//   isFetching: PropTypes.bool,\n//   reactionIds: PropTypes.arrayOf(PropTypes.string),\n//   reactions: PropTypes.shape({\n//     id: PropTypes.string,\n//     user: PropTypes.shape({\n//       id: PropTypes.string,\n//       profileName: PropTypes.string,\n//       profileLink: PropTypes.string,\n//       profileImg: PropTypes.string\n//     }),\n//     feeling: PropTypes.string,\n//     targetId: PropTypes.string\n//   })\n// }\n\n// ReactionSummary.defaultProps = {\n//   isFetching: false,\n//   reactionIds: [],\n//   reactions: {}\n// }\n\nexport default ReactionSummary\n","import { connect } from 'react-redux'\nimport { PostDataState } from '../reducers/types'\nimport {\n  getReactionIsFetching,\n  getReactionIds,\n  getReactions\n} from '../reducers/selector'\nimport ReactionSummary from '../components/ReactionSummary'\n\nconst mapStateToProps = (state: PostDataState) => {\n  return {\n    isFetching: getReactionIsFetching(state),\n    reactionIds: getReactionIds(state),\n    reactions: getReactions(state)\n  }\n}\n\nexport default connect(mapStateToProps)(ReactionSummary)\n","import React from 'react'\n// import { PropTypes } from 'prop-types'\nimport styled from 'styled-components'\nimport { displayFlex } from '../styles/page'\nimport { CommentDataState, ShareDataState } from '../reducers/types'\nimport { CommentData, ShareData } from '../actions/types'\nimport textFormat, { FEEDBACK_TYPE } from '../utils/textFormat'\nimport FeedbackCount from './FeedbackCount'\n\nconst summaryFeedbacks = (\n  feedbacks: Array<CommentData> | Array<ShareData>,\n  type: FEEDBACK_TYPE\n) => {\n  const summary = {\n    forText: '',\n    forTip: ''\n  }\n  summary.forText = textFormat.getFeedbacksCount(feedbacks, type)\n  summary.forTip = textFormat.getFeedbacksCountTip(feedbacks, 18)\n  return summary\n}\n\ninterface StyledComponentProps {\n  isFetching: boolean\n}\n\nconst CommentAndShareSummaryWrapper = styled.div<StyledComponentProps>`\n  ${({ isFetching }) => isFetching && 'display: none;'}\n  ${displayFlex}\n`\n\nconst SharesWrapper = styled.div`\n  margin-left: 8px;\n`\n\ninterface CommentAndShareSummaryProps {\n  isFetching: boolean\n  commentIds: Array<string>\n  comments: CommentDataState\n  shareIds: Array<string>\n  shares: ShareDataState\n}\n\nconst CommentAndShareSummary: React.FC<CommentAndShareSummaryProps> = ({\n  isFetching,\n  commentIds,\n  comments,\n  shareIds,\n  shares\n}) => {\n  const commentArray = commentIds.map(id => comments[id])\n  const shareArray = shareIds.map(id => shares[id])\n  const commentsSummary = summaryFeedbacks(commentArray, FEEDBACK_TYPE.COMMENT)\n  const sharesSummary = summaryFeedbacks(shareArray, FEEDBACK_TYPE.SHARE)\n  return (\n    <CommentAndShareSummaryWrapper isFetching={isFetching}>\n      <FeedbackCount\n        forText={commentsSummary.forText}\n        forTip={commentsSummary.forTip}\n        type=\"comment\"\n      />\n      <SharesWrapper>\n        <FeedbackCount\n          forText={sharesSummary.forText}\n          forTip={sharesSummary.forTip}\n          type=\"share\"\n        />\n      </SharesWrapper>\n    </CommentAndShareSummaryWrapper>\n  )\n}\n\n// CommentAndShareSummary.propTypes = {\n//   isFetching: PropTypes.bool,\n//   commentIds: PropTypes.arrayOf(PropTypes.string),\n//   comments: PropTypes.shape({\n//     id: PropTypes.string,\n//     user: PropTypes.shape({\n//       profileName: PropTypes.string,\n//       profileLink: PropTypes.string,\n//       profileImg: PropTypes.string,\n//       isVerified: PropTypes.bool\n//     }),\n//     isHidden: PropTypes.bool,\n//     saying: PropTypes.string,\n//     attachMedia: PropTypes.string\n//   }),\n//   shareIds: PropTypes.arrayOf(PropTypes.string),\n//   shares: PropTypes.PropTypes.shape({\n//     id: PropTypes.string,\n//     user: PropTypes.shape({\n//       profileName: PropTypes.string,\n//       profileLink: PropTypes.string,\n//       profileImg: PropTypes.string,\n//       isVerified: PropTypes.bool\n//     })\n//   })\n// }\n\n// CommentAndShareSummary.defaultProps = {\n//   isFetching: false,\n//   commentIds: [],\n//   comments: {},\n//   shareIds: [],\n//   shares: {}\n// }\n\nexport default CommentAndShareSummary\n","import { connect } from 'react-redux'\nimport { PostDataState } from '../reducers/types'\nimport {\n  getCommentIsFetching,\n  getShareIsFetching,\n  getCommentIds,\n  getComments,\n  getShareIds,\n  getShares\n} from '../reducers/selector'\nimport CommentAndShareSummary from '../components/CommentAndShareSummary'\n\nconst mapStateToProps = (state: PostDataState) => {\n  return {\n    isFetching: getCommentIsFetching(state) || getShareIsFetching(state),\n    commentIds: getCommentIds(state),\n    comments: getComments(state),\n    shareIds: getShareIds(state),\n    shares: getShares(state)\n  }\n}\n\nexport default connect(mapStateToProps)(CommentAndShareSummary)\n","import React from 'react'\nimport styled from 'styled-components'\nimport cssConst from '../styles/constants'\nimport { displayFlex, justifyContentSpaceBetween } from '../styles/page'\nimport DisplayReactSummary from '../containers/DisplayReactSummary'\nimport DisplayCommentAndShareSummary from '../containers/DisplayCommentAndShareSummary'\n\nconst FeedbackSummaryWrapper = styled.div`\n  ${displayFlex}\n  ${justifyContentSpaceBetween}\n  color: ${cssConst.infoColorGray}\n  border-bottom: ${cssConst.postSectionBorder};\n  margin: 10px 12px 0 12px;\n  padding: 0 0 10px 0;\n`\n\nconst FeedbackSummary = () => {\n  return (\n    <FeedbackSummaryWrapper>\n      <DisplayReactSummary />\n      <DisplayCommentAndShareSummary />\n    </FeedbackSummaryWrapper>\n  )\n}\n\nFeedbackSummary.displayName = 'FeedbackSummary'\n\nexport default FeedbackSummary\n"],"sourceRoot":""}