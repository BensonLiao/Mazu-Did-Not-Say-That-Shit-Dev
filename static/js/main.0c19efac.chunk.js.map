{"version":3,"sources":["actions/types.ts","actions/index.ts","utils/dataSchema.ts","utils/dataMock.ts","serviceWorker.ts","reducers/react.ts","reducers/commentReact.ts","reducers/comment.ts","reducers/share.ts","reducers/index.ts","configureStore.ts","sagas/index.ts","index.tsx"],"names":["FEEDBACK","REACTIONS","REQUEST_LODA_DATA","LOAD_DATA","requestLoadData","type","payload","reacts","commentReacts","comments","shares","loadData","entities","feedbackReact","REACT","undoReact","id","UNDO_REACT","feedbackReactToComment","COMMENT_REACT","undoReactToComment","UNDO_COMMENT_REACT","feedbackComment","COMMENT","undoComment","UNDO_COMMENT","updateComment","saying","UPDATE_COMMENT","toggleCommentVisibility","COMMENT_VISIBILITY_TOGGLE","ReactSchema","schema","Entity","CommentReactSchema","CommentSchema","ShareSchema","definedUsers","goldXFive","uuidv1","profileName","profileLink","profileImg","isVerified","theMazu","terryGoodTiming","dingDing","toolMan","english","koreanFish","careWheelEveryday","universityFoundField","sparkJoy","getFakeUser","nameId","gender","maleUserImg","femaleUserImg","userImg","Boolean","window","location","hostname","match","reactsById","produce","draft","action","Object","keys","forEach","addReactByNormalizr","addReact","removeReact","allReact","items","push","isFetching","addReactIdByNormalizr","unshift","addReactId","splice","findIndex","reactId","removeReactId","reactReducer","combineReducers","byId","allIds","commentReactReducer","commentsById","addCommentByNormalizr","addComment","removeComment","currentVisibility","isHidden","allComment","addCommentIdByNormalizr","addCommentId","itemId","removeCommentId","commentReducer","sharesById","addShareByNormalizr","SHARE","addShare","allShare","addShareIdByNormalizr","addShareId","shareReducer","rootReducer","configureStore","preloadedState","sagaMiddleware","createSagaMiddleware","createStore","composeWithDevTools","applyMiddleware","runSaga","run","fetchPostApi","requestFetchPost","startup","root","requestDelay","delay","endPoint","axios","get","then","response","data","json","catch","err","console","log","result","all","call","put","fork","takeLatest","store","rootSaga","post","user","time","content","title","App","React","lazy","ReactDOM","render","fallback","postData","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c19efac.chunk.js","sourcesContent":["// Enumerating the action type of the post's feedback\nexport enum FEEDBACK {\n  REACT = 'REACT',\n  UNDO_REACT = 'UNDO_REACT',\n  COMMENT_REACT = 'COMMENT_REACT',\n  UNDO_COMMENT_REACT = 'UNDO_COMMENT_REACT',\n  COMMENT = 'COMMENT',\n  UNDO_COMMENT = 'UNDO_COMMENT',\n  UPDATE_COMMENT = 'UPDATE_COMMENT',\n  COMMENT_VISIBILITY_TOGGLE = 'COMMECOMMENT_VISIBILITY_TOGGLENT_HIDE',\n  SHARE = 'SHARE',\n  TARGET = 'POST'\n}\n\nexport interface FEELINGS {\n  LIKE: string\n  HAHA: string\n  LOVE: string\n  WOW: string\n  SAD: string\n  ANGRY: string\n}\n\nexport enum REACTIONS {\n  LIKE = 'LIKE',\n  HAHA = 'HAHA',\n  LOVE = 'LOVE',\n  WOW = 'WOW',\n  SAD = 'SAD',\n  ANGRY = 'ANGRY'\n}\n\n// Describing the shape of the post's feedback slice of state\nexport interface UserData {\n  id: string\n  profileName: string\n  profileLink: string\n  profileImg: string\n  isVerified: boolean\n}\n\nexport interface ReactData {\n  id: string\n  user: UserData\n  feeling: REACTIONS\n  targetId: string | 'POST'\n}\n\nexport interface CommentReactData {\n  id: string\n  user: UserData\n  feeling: REACTIONS\n  targetId: string\n}\n\nexport interface CommentData {\n  id: string\n  reactId: string\n  user: UserData\n  saying: string\n  targetId: string | 'POST'\n  isHidden: boolean\n  attachMedia: string\n  time: string\n}\n\nexport interface ShareData {\n  id: string\n  user: UserData\n}\n\nexport interface PostDataReact {\n  entities: ReactData\n}\n\nexport interface PostDataCommentReact {\n  entities: CommentReactData\n}\n\nexport interface PostDataComment {\n  entities: CommentData\n}\n\nexport interface PostDataShare {\n  entities: ShareData\n}\n\nexport interface PostData {\n  entities: {\n    reacts: {\n      [key: string]: ReactData\n    }\n    commentReacts: {\n      [key: string]: CommentReactData\n    }\n    comments: {\n      [key: string]: CommentData\n    }\n    shares: {\n      [key: string]: ShareData\n    }\n  }\n}\n\n// Describing the different ACTION NAMES available\nexport const REQUEST_LODA_DATA = 'REQUEST_LODA_DATA'\nexport const LOAD_DATA = 'LOAD_DATA'\n\nexport interface RequestLoadData {\n  type: typeof REQUEST_LODA_DATA\n  payload: PostData\n}\n\nexport interface LoadData {\n  type: typeof LOAD_DATA\n  payload: PostData\n}\n\nexport type LoadDataActionTypes = RequestLoadData | LoadData\n\nexport interface GetByIdPayload {\n  id: string\n}\n\nexport interface React {\n  type: typeof FEEDBACK.REACT\n  payload: ReactData\n}\n\nexport interface ReactId {\n  type: typeof FEEDBACK.REACT\n  payload: GetByIdPayload\n}\n\nexport interface UndoReact {\n  type: typeof FEEDBACK.UNDO_REACT\n  payload: GetByIdPayload\n}\n\nexport type ReactActionTypes = React | ReactId | UndoReact\n\nexport interface CommentReact {\n  type: typeof FEEDBACK.COMMENT_REACT\n  payload: CommentReactData\n}\n\nexport interface CommentReactId {\n  type: typeof FEEDBACK.COMMENT_REACT\n  payload: GetByIdPayload\n}\n\nexport interface UndoCommentReact {\n  type: typeof FEEDBACK.UNDO_COMMENT_REACT\n  payload: GetByIdPayload\n}\n\nexport type CommentReactActionTypes =\n  | CommentReact\n  | CommentReactId\n  | UndoCommentReact\n\nexport interface UpdateCommentPayload {\n  id: string\n  saying: string\n}\n\nexport interface Comment {\n  type: typeof FEEDBACK.COMMENT\n  payload: CommentData\n}\n\nexport interface CommentId {\n  type: typeof FEEDBACK.COMMENT\n  payload: GetByIdPayload\n}\n\nexport interface UndoComment {\n  type: typeof FEEDBACK.UNDO_COMMENT\n  payload: GetByIdPayload\n}\n\nexport interface UpdateComment {\n  type: typeof FEEDBACK.UPDATE_COMMENT\n  payload: UpdateCommentPayload\n}\n\nexport type CommentActionTypes =\n  | Comment\n  | CommentId\n  | UndoComment\n  | UpdateComment\n\nexport interface Share {\n  type: typeof FEEDBACK.SHARE\n  payload: ShareData\n}\n\nexport interface ShareId {\n  type: typeof FEEDBACK.SHARE\n  payload: GetByIdPayload\n}\n\nexport type ShareActionTypes = Share | ShareId\n","import {\n  REQUEST_LODA_DATA,\n  LOAD_DATA,\n  FEEDBACK,\n  PostData,\n  PostDataReact,\n  PostDataCommentReact,\n  PostDataComment,\n  PostDataShare,\n  UpdateCommentPayload\n} from './types'\n\nexport const requestLoadData = () => ({\n  type: REQUEST_LODA_DATA,\n  payload: {\n    reacts: {},\n    commentReacts: {},\n    comments: {},\n    shares: {}\n  }\n})\n\nexport const loadData = ({ entities }: PostData) => ({\n  type: LOAD_DATA,\n  payload: entities\n})\n\nexport const feedbackReact = ({ entities }: PostDataReact) => ({\n  type: FEEDBACK.REACT,\n  payload: entities\n})\n\nexport const undoReact = (id: string) => ({\n  type: FEEDBACK.UNDO_REACT,\n  payload: {\n    id\n  }\n})\n\nexport const feedbackReactToComment = ({ entities }: PostDataCommentReact) => ({\n  type: FEEDBACK.COMMENT_REACT,\n  payload: entities\n})\n\nexport const undoReactToComment = (id: string) => ({\n  type: FEEDBACK.UNDO_COMMENT_REACT,\n  payload: {\n    id\n  }\n})\n\nexport const feedbackComment = ({ entities }: PostDataComment) => ({\n  type: FEEDBACK.COMMENT,\n  payload: entities\n})\n\nexport const undoComment = (id: string) => ({\n  type: FEEDBACK.UNDO_COMMENT,\n  payload: {\n    id\n  }\n})\n\nexport const updateComment = ({ id, saying }: UpdateCommentPayload) => ({\n  type: FEEDBACK.UPDATE_COMMENT,\n  payload: {\n    id,\n    saying\n  }\n})\n\nexport const toggleCommentVisibility = (id: string) => ({\n  type: FEEDBACK.COMMENT_VISIBILITY_TOGGLE,\n  payload: {\n    id\n  }\n})\n\nexport const feedbackShare = ({ entities }: PostDataShare) => ({\n  type: FEEDBACK.SHARE,\n  payload: entities\n})\n","import { normalize, schema, Schema } from 'normalizr'\n\nexport const ReactSchema = new schema.Entity('reacts')\n\nexport const CommentReactSchema = new schema.Entity('commentReacts')\n\n// Define your comments schema\nexport const CommentSchema = new schema.Entity('comments')\n\n// Define your shares schema\nexport const ShareSchema = new schema.Entity('shares')\n\n// Define your post schema\nexport const PostSchema = new schema.Entity('post', {\n  reacts: [ReactSchema],\n  commentReacts: [CommentReactSchema],\n  comments: [CommentSchema],\n  shares: [ShareSchema]\n})\n\nexport const getNormalizedData = (data: any, dataSchema: Schema) =>\n  normalize(data, dataSchema)\n","import uuidv1 from 'uuid/v1'\nimport { REACTIONS, FEEDBACK } from '../actions/types'\nimport { getNormalizedData, PostSchema } from './dataSchema'\n\nexport const definedUsers = {\n  goldXFive: {\n    id: uuidv1(),\n    profileName: '金乘五',\n    profileLink: 'https://www.facebook.com/takeshikaneshirofanspage/',\n    profileImg: 'goldxfive.png',\n    isVerified: false\n  },\n  theMazu: {\n    id: uuidv1(),\n    profileName: '媽祖',\n    profileLink: 'https://www.facebook.com/themazhou/',\n    profileImg: 'mazu.png',\n    isVerified: false\n  },\n  terryGoodTiming: {\n    id: uuidv1(),\n    profileName: '鍋苔冥',\n    profileLink: 'https://www.facebook.com/TerryGou1018/',\n    profileImg: 'terry.png',\n    isVerified: true\n  },\n  dingDing: {\n    id: uuidv1(),\n    profileName: '叮守鐘',\n    profileLink: 'https://www.youtube.com/watch?v=_97bLScvHWs',\n    profileImg: 'dingding.png',\n    isVerified: false\n  },\n  toolMan: {\n    id: uuidv1(),\n    profileName: '台灣工具伯 汪進坪',\n    profileLink: 'https://www.facebook.com/jingping.tw/',\n    profileImg: 'toolman.png',\n    isVerified: true\n  },\n  english: {\n    id: uuidv1(),\n    profileName: '菜應蚊',\n    profileLink: 'https://www.facebook.com/tsaiingwen/',\n    profileImg: 'english.png',\n    isVerified: true\n  },\n  koreanFish: {\n    id: uuidv1(),\n    profileName: '韓國魚',\n    profileLink: 'https://www.facebook.com/twherohan/',\n    profileImg: 'korean-fish.png',\n    isVerified: true\n  },\n  careWheelEveryday: {\n    id: uuidv1(),\n    profileName: '每天關心愛情摩天輪的興建狀況',\n    profileLink: 'https://www.facebook.com/CareLoveFerrisWheelEveryday/',\n    profileImg: 'wheel.png',\n    isVerified: false\n  },\n  universityFoundField: {\n    id: uuidv1(),\n    profileName: '找到田大學',\n    profileLink: '#',\n    profileImg: 'anonymous-university.png',\n    isVerified: false\n  },\n  sparkJoy: {\n    id: uuidv1(),\n    profileName: '尛理惠的整理魔法',\n    profileLink: '#',\n    profileImg: 'sparkJoy.jpg',\n    isVerified: true\n  }\n}\n\nconst definedReactors = [\n  definedUsers.terryGoodTiming,\n  definedUsers.koreanFish,\n  definedUsers.universityFoundField,\n  definedUsers.english,\n  definedUsers.toolMan,\n  definedUsers.dingDing\n]\n\n/**\n * Get user object for reactions with the following properties:\n *   @prop {id}\n *   @prop {profileName}\n *   @prop {profileLink}\n *   @prop {profileImg}\n * @param {nameId} nameId\n *  An id to distinguish from users,\n *  will append to @prop {profileName}.\n * @param {gender} gender\n *  Choose an img represent gender, `MALE` if ommited.\n */\nconst getReactor = (nameId: number, gender: string = 'MALE') => {\n  const user =\n    nameId < definedReactors.length\n      ? definedReactors[nameId]\n      : getFakeUser(nameId, gender)\n  return user\n}\n\n/**\n * Get fake user object with the following properties:\n *   @prop {id}\n *   @prop {profileName}\n *   @prop {profileLink}\n *   @prop {profileImg}\n * @param {nameId} nameId\n *  An id to distinguish from users,\n *  will append to @prop {profileName}.\n * @param {gender} gender\n *  Choose an img represent gender, `MALE` if ommited.\n */\nexport const getFakeUser = (\n  nameId: number | string,\n  gender: string = 'MALE'\n) => {\n  const maleUserImg = 'anonymous-male.png'\n  const femaleUserImg = 'anonymous-female.png'\n  const userImg = gender === 'MALE' ? maleUserImg : femaleUserImg\n  return {\n    id: uuidv1(),\n    profileName: `假帳號${nameId}`,\n    profileLink: '#',\n    profileImg: userImg,\n    isVerified: false\n  }\n}\n\nconst createCommentReactions = (\n  commentId: string,\n  commentReacts:\n    | any[]\n    | {\n        id: string\n        user: {\n          id: string\n          profileName: string\n          profileLink: string\n          profileImg: string\n          isVerified: boolean\n        }\n        feeling: string\n        targetId: string\n      }[],\n  commentReactsTotal = 200,\n  ratio = [3, 2, 1]\n) => {\n  if (typeof commentId !== 'string') {\n    throw new Error('Comment id must be string.')\n  }\n  if (ratio.length > 6 || ratio.length < 1) {\n    throw new Error('Ratio must be 1 to 6 numbers.')\n  }\n  if (ratio.filter(r => typeof r !== 'number').length > 0) {\n    throw new Error('Array of ratio must be type of number.')\n  }\n  // Calculate reations feeling distribution by ratio\n  // If commentReactsTotal < ratioTotal, ratio will be [1] for full of Likes\n  const ratioTotal = ratio.reduce((r, acc) => r + acc)\n  const ratioAvailable = commentReactsTotal >= ratioTotal\n  const divisorLike = ratioAvailable ? ratioTotal / ratio[0] : 1\n  const divisorHaha = ratioAvailable && ratio[1] ? ratioTotal / ratio[1] : 0\n  const divisorLove = ratioAvailable && ratio[2] ? ratioTotal / ratio[2] : 0\n  const divisorWow = ratioAvailable && ratio[3] ? ratioTotal / ratio[3] : 0\n  const divisorSad = ratioAvailable && ratio[4] ? ratioTotal / ratio[4] : 0\n  const divisorAnger = ratioAvailable && ratio[5] ? ratioTotal / ratio[5] : 0\n  const totalLikes =\n    divisorLike === 0 ? 0 : Math.ceil(commentReactsTotal / divisorLike)\n  const totalHahas =\n    divisorHaha === 0 ? 0 : Math.ceil(commentReactsTotal / divisorHaha)\n  const totalLoves =\n    divisorLove === 0 ? 0 : Math.ceil(commentReactsTotal / divisorLove)\n  const totalWows =\n    divisorWow === 0 ? 0 : Math.ceil(commentReactsTotal / divisorWow)\n  const totalSads =\n    divisorSad === 0 ? 0 : Math.ceil(commentReactsTotal / divisorSad)\n  const totalAngers =\n    divisorAnger === 0 ? 0 : Math.ceil(commentReactsTotal / divisorAnger)\n  for (let i = 0; i < commentReactsTotal; i++) {\n    if (i < totalLikes) {\n      commentReacts.push({\n        id: uuidv1(),\n        user: getFakeUser(i),\n        feeling: REACTIONS.LIKE,\n        targetId: commentId\n      })\n    } else if (i < totalLikes + totalHahas) {\n      commentReacts.push({\n        id: uuidv1(),\n        user: getFakeUser(i),\n        feeling: REACTIONS.HAHA,\n        targetId: commentId\n      })\n    } else if (i < totalLikes + totalHahas + totalLoves) {\n      commentReacts.push({\n        id: uuidv1(),\n        user: getFakeUser(i),\n        feeling: REACTIONS.LOVE,\n        targetId: commentId\n      })\n    } else if (i < totalLikes + totalHahas + totalLoves + totalWows) {\n      commentReacts.push({\n        id: uuidv1(),\n        user: getFakeUser(i),\n        feeling: REACTIONS.WOW,\n        targetId: commentId\n      })\n    } else if (\n      i <\n      totalLikes + totalHahas + totalLoves + totalWows + totalSads\n    ) {\n      commentReacts.push({\n        id: uuidv1(),\n        user: getFakeUser(i),\n        feeling: REACTIONS.SAD,\n        targetId: commentId\n      })\n    } else if (\n      i <\n      totalLikes + totalHahas + totalLoves + totalWows + totalSads + totalAngers\n    ) {\n      commentReacts.push({\n        id: uuidv1(),\n        user: getFakeUser(i),\n        feeling: REACTIONS.ANGRY,\n        targetId: commentId\n      })\n    }\n  }\n}\n\n/**\n * create fake reactions with default ratio of\n * 1/2 of Likes, 1/3 of Hahas and 1/6 of Loves\n * if @param {ratio} ratio was omitted.\n * @param {totalReactions} totalReactions\n *  How many comments to make.\n * @param {ratio} ratio\n *  How to distribute the ratio of reaction type,\n *  accept only an array of 1 to 6 numbers,\n *  and ignore the omitted numbers.\n *  eg. `[3,2,1]` will distribute the ratio for\n *  3/(3+2+1) of `Like`, 2/(3+2+1) of `Haha`,\n *  1/(3+2+1) of `Love` and empty ratio for the rest of types.\n *  eg2. `[1]` will distribute the ratio for full of `Like`.\n *  eg3. `[0,0,0,0,0,1]` will distribute the ratio for full of `Anger`.\n *  eg4. `[0,0,0,0,1]` will distribute the ratio for full of `Sad`.\n * @returns {reactObj}\n *  An object contains th following properties:\n *  @prop {reacts}\n *   An array of objects contains the following properties:\n *   @prop {name}\n *    The user's profile name\n *   @prop {feeling}\n *    The react's feeling: `Like`, `Haha`, `Love`,\n *    `Wow`, `Sad`, `Anger`\n *  @prop {commentIds}\n *   An array of @prop {commentId}, type is string.\n *   For @function createComments .\n */\nconst createReactions = (\n  totalReactions: number,\n  ratio: Array<number> = [3, 2, 1]\n) => {\n  if (totalReactions < 1) {\n    throw new Error('Number of total reactions at least to be 1.')\n  }\n  if (ratio.length > 6 || ratio.length < 1) {\n    throw new Error('Ratio must be 1 to 6 numbers.')\n  }\n  if (ratio.filter(r => typeof r !== 'number').length > 0) {\n    throw new Error('Array of ratio must be type of number.')\n  }\n  // Calculate reations feeling distribution by ratio\n  // If totalReactions < ratioTotal, ratio will be [1] for full of Likes\n  const ratioTotal = ratio.reduce((r, acc) => r + acc)\n  const ratioAvailable = totalReactions >= ratioTotal\n  const divisorLike = ratioAvailable ? ratioTotal / ratio[0] : 1\n  const divisorHaha = ratioAvailable && ratio[1] ? ratioTotal / ratio[1] : 0\n  const divisorLove = ratioAvailable && ratio[2] ? ratioTotal / ratio[2] : 0\n  const divisorWow = ratioAvailable && ratio[3] ? ratioTotal / ratio[3] : 0\n  const divisorSad = ratioAvailable && ratio[4] ? ratioTotal / ratio[4] : 0\n  const divisorAnger = ratioAvailable && ratio[5] ? ratioTotal / ratio[5] : 0\n  const totalLikes =\n    divisorLike === 0 ? 0 : Math.ceil(totalReactions / divisorLike)\n  const totalHahas =\n    divisorHaha === 0 ? 0 : Math.ceil(totalReactions / divisorHaha)\n  const totalLoves =\n    divisorLove === 0 ? 0 : Math.ceil(totalReactions / divisorLove)\n  const totalWows =\n    divisorWow === 0 ? 0 : Math.ceil(totalReactions / divisorWow)\n  const totalSads =\n    divisorSad === 0 ? 0 : Math.ceil(totalReactions / divisorSad)\n  const totalAngers =\n    divisorAnger === 0 ? 0 : Math.ceil(totalReactions / divisorAnger)\n  // Add reactions as many as totalReactions\n  // And the first n reactions is pre-defined reactors\n  // (n = length of pre-defined reactors)\n  // Or (totalReactions + commentReactsTotal) reactions for comments\n  // if totalComments > 0\n  const reacts = []\n  for (let i = 0; i < totalReactions; i++) {\n    if (i < totalLikes) {\n      reacts.push({\n        id: uuidv1(),\n        user: getReactor(i),\n        feeling: REACTIONS.LIKE,\n        targetId: FEEDBACK.TARGET\n      })\n    } else if (i < totalLikes + totalHahas) {\n      reacts.push({\n        id: uuidv1(),\n        user: getReactor(i),\n        feeling: REACTIONS.HAHA,\n        targetId: FEEDBACK.TARGET\n      })\n    } else if (i < totalLikes + totalHahas + totalLoves) {\n      reacts.push({\n        id: uuidv1(),\n        user: getReactor(i),\n        feeling: REACTIONS.LOVE,\n        targetId: FEEDBACK.TARGET\n      })\n    } else if (i < totalLikes + totalHahas + totalLoves + totalWows) {\n      reacts.push({\n        id: uuidv1(),\n        user: getReactor(i),\n        feeling: REACTIONS.WOW,\n        targetId: FEEDBACK.TARGET\n      })\n    } else if (\n      i <\n      totalLikes + totalHahas + totalLoves + totalWows + totalSads\n    ) {\n      reacts.push({\n        id: uuidv1(),\n        user: getReactor(i),\n        feeling: REACTIONS.SAD,\n        targetId: FEEDBACK.TARGET\n      })\n    } else if (\n      i <\n      totalLikes + totalHahas + totalLoves + totalWows + totalSads + totalAngers\n    ) {\n      reacts.push({\n        id: uuidv1(),\n        user: getReactor(i),\n        feeling: REACTIONS.ANGRY,\n        targetId: FEEDBACK.TARGET\n      })\n    }\n  }\n  return reacts\n}\n\n/**\n * create fake comments.\n * @param {commentIds} commentIds\n *  How many comments to make, based on output of\n *  @function createReactions .\n * @returns {comments}\n *  An array of objects contains the following properties:\n *  @prop {name}\n *    The user's profile name\n */\nconst createComments = (commentsTotal: number) => {\n  const commentReacts = []\n  const comments = [\n    {\n      id: uuidv1(),\n      user: definedUsers.dingDing,\n      saying: '可以托夢讓我重選台北市長嗎？',\n      time: '4天',\n      targetId: FEEDBACK.TARGET,\n      reactId: uuidv1(),\n      isHidden: false\n    },\n    {\n      id: uuidv1(),\n      user: definedUsers.toolMan,\n      saying: '這個我想，要查證比較難啦',\n      time: '5天',\n      targetId: FEEDBACK.TARGET,\n      reactId: uuidv1(),\n      isHidden: false\n    },\n    {\n      id: uuidv1(),\n      user: definedUsers.english,\n      saying: '我也這麼覺得',\n      time: '3天',\n      targetId: FEEDBACK.TARGET,\n      reactId: uuidv1(),\n      isHidden: false\n    },\n    {\n      id: uuidv1(),\n      user: definedUsers.terryGoodTiming,\n      saying: '謝謝樓主托夢，三樓的民主不能當飯吃！',\n      time: '3天',\n      targetId: FEEDBACK.TARGET,\n      reactId: uuidv1(),\n      isHidden: false\n    },\n    {\n      id: uuidv1(),\n      user: definedUsers.koreanFish,\n      saying: '樓上為什麼不考慮吃個包子呢？',\n      time: '3天',\n      targetId: FEEDBACK.TARGET,\n      reactId: uuidv1(),\n      isHidden: false\n    },\n    {\n      id: uuidv1(),\n      user: definedUsers.careWheelEveryday,\n      saying: '五樓，我快等不及了',\n      time: '5天',\n      targetId: FEEDBACK.TARGET,\n      reactId: uuidv1(),\n      isHidden: false\n    },\n    {\n      id: uuidv1(),\n      user: definedUsers.universityFoundField,\n      saying: '五樓要不要藉這個機會在神明的面前澄清一下？',\n      attachMedia: 'wvWFAMT.jpg',\n      mediaType: 'pic',\n      time: '4天',\n      targetId: FEEDBACK.TARGET,\n      reactId: uuidv1(),\n      isHidden: false\n    },\n    {\n      id: uuidv1(),\n      user: definedUsers.sparkJoy,\n      saying: `臺灣的碰有打家好～\n      今天要來教打家年後清理臉書版面的小妙招分享\n      1. 點進去五樓的粉絲團\n      2. 啊～原來ＸＸＸ和其他 10 位朋友都說這個讚\n      3. 果斷斷開好友連結\n      #怦然心動的臉書整理魔法\n      #簡單三步驟打家學會了嗎`,\n      time: '5天',\n      targetId: FEEDBACK.TARGET,\n      reactId: uuidv1(),\n      isHidden: false\n    }\n  ]\n  createCommentReactions(comments[0].id, commentReacts, 452, [2, 0, 0, 1])\n  createCommentReactions(comments[1].id, commentReacts, 582, [3, 2, 0, 1])\n  createCommentReactions(comments[2].id, commentReacts, 3120, [2, 1])\n  createCommentReactions(comments[3].id, commentReacts, 187, [0, 0, 0, 0, 0, 1])\n  createCommentReactions(comments[4].id, commentReacts, 987, [2, 0, 0, 0, 0, 1])\n  createCommentReactions(comments[5].id, commentReacts, 501, [2, 3])\n  createCommentReactions(comments[6].id, commentReacts, 872, [2, 1, 0, 1, 2])\n  createCommentReactions(comments[7].id, commentReacts, 789, [2, 1, 0, 1])\n  for (let i = 0; i < commentsTotal; i++) {\n    if (comments[i] === undefined) {\n      comments.push({\n        id: uuidv1(),\n        user: getFakeUser(i),\n        saying: '假留言',\n        time: `${i}天`,\n        targetId: FEEDBACK.TARGET,\n        reactId: uuidv1(),\n        isHidden: false\n      })\n    }\n  }\n  if (comments.length > commentsTotal) {\n    comments.splice(commentsTotal)\n  }\n  const commentObj = { comments, commentReacts }\n  return commentObj\n}\n\n/**\n * create fake shares.\n * @param {sharesTotal} sharesTotal\n *  How many shares to make, 290 will pass down if omitted.\n * @returns {shares}\n *  An array of objects contains the following properties:\n *  @prop {name}\n *    The user's profile name\n */\nconst createShares = (sharesTotal: number) => {\n  const shares = [\n    { id: uuidv1(), user: definedUsers.terryGoodTiming },\n    { id: uuidv1(), user: definedUsers.koreanFish },\n    { id: uuidv1(), user: definedUsers.english },\n    { id: uuidv1(), user: definedUsers.toolMan },\n    { id: uuidv1(), user: definedUsers.dingDing },\n    { id: uuidv1(), user: definedUsers.universityFoundField },\n    { id: uuidv1(), user: definedUsers.careWheelEveryday },\n    { id: uuidv1(), user: definedUsers.sparkJoy }\n  ]\n  for (let i = 0; i < sharesTotal; i++) {\n    if (shares[i] === undefined) {\n      shares.push({ id: uuidv1(), user: getFakeUser(i) })\n    }\n  }\n  if (shares.length > sharesTotal) {\n    shares.splice(sharesTotal)\n  }\n  return shares\n}\n\nexport const createResponseData = (\n  reactsTotal = 17419,\n  commentsTotal = 1552,\n  sharesTotal = 2871\n) => {\n  const reacts = createReactions(reactsTotal)\n  const { comments, commentReacts } = createComments(commentsTotal)\n  const shares = createShares(sharesTotal)\n  const normalizedData = getNormalizedData(\n    {\n      reacts,\n      commentReacts,\n      comments,\n      shares\n    },\n    PostSchema\n  )\n  return {\n    status: 'success',\n    data: normalizedData\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import { combineReducers } from 'redux'\nimport produce, { Draft } from 'immer'\nimport {\n  REQUEST_LODA_DATA,\n  LOAD_DATA,\n  FEEDBACK,\n  ReactActionTypes,\n  React\n} from '../actions/types'\nimport { LoadDataActionTypes } from './types'\nimport { ReactDataState, AllIdsDataState } from './types'\n\nconst addReactByNormalizr = (\n  draft: Draft<ReactDataState>,\n  action: LoadDataActionTypes\n) => {\n  const {\n    payload: { reacts }\n  } = action\n  Object.keys(reacts).forEach(id => {\n    draft[id] = reacts[id]\n  })\n}\n\nconst addReact = (draft: Draft<ReactDataState>, action: ReactActionTypes) => {\n  const { payload } = action as React\n  draft[payload.id] = payload\n}\n\nconst removeReact = (\n  draft: Draft<ReactDataState>,\n  action: ReactActionTypes\n) => {\n  const {\n    payload: { id }\n  } = action\n  delete draft[id]\n}\n\nconst reactsById = produce((draft, action) => {\n  switch (action.type) {\n    case LOAD_DATA:\n      addReactByNormalizr(draft, action)\n      break\n    case FEEDBACK.REACT:\n      addReact(draft, action)\n      break\n    case FEEDBACK.UNDO_REACT:\n      removeReact(draft, action)\n      break\n    default:\n  }\n}, {})\n\nconst addReactIdByNormalizr = (\n  draft: Draft<AllIdsDataState>,\n  action: LoadDataActionTypes\n) => {\n  const {\n    type,\n    payload: { reacts }\n  } = action\n  // Extract object and append all its react's ID to the list of allIds\n  Object.keys(reacts).forEach(id => {\n    draft.items.push(id)\n  })\n  switch (type) {\n    case REQUEST_LODA_DATA:\n      draft.isFetching = true\n      break\n    case LOAD_DATA:\n      draft.isFetching = false\n      break\n    default:\n  }\n}\n\nconst addReactId = (\n  draft: Draft<AllIdsDataState>,\n  action: ReactActionTypes\n) => {\n  const {\n    payload: { id }\n  } = action\n  // Prepend the new react's ID to the list of allIds\n  draft.items.unshift(id)\n}\n\nconst removeReactId = (\n  draft: Draft<AllIdsDataState>,\n  action: ReactActionTypes\n) => {\n  const {\n    payload: { id }\n  } = action\n  // Remove the react's ID from the list of allIds\n  draft.items.splice(draft.items.findIndex(reactId => reactId === id), 1)\n}\n\nconst allReact = produce(\n  (draft, action) => {\n    switch (action.type) {\n      case REQUEST_LODA_DATA:\n      case LOAD_DATA:\n        addReactIdByNormalizr(draft, action)\n        break\n      case FEEDBACK.REACT:\n        addReactId(draft, action)\n        break\n      case FEEDBACK.UNDO_REACT:\n        removeReactId(draft, action)\n        break\n      default:\n    }\n  },\n  { items: [], isFetching: false }\n)\n\nconst reactReducer = combineReducers({\n  byId: reactsById,\n  allIds: allReact\n})\n\nexport default reactReducer\n","import { combineReducers } from 'redux'\nimport produce, { Draft } from 'immer'\nimport {\n  REQUEST_LODA_DATA,\n  LOAD_DATA,\n  FEEDBACK,\n  CommentReactActionTypes,\n  CommentReact\n} from '../actions/types'\nimport { LoadDataActionTypes } from './types'\nimport { CommentReactDataState, AllIdsDataState } from './types'\n\nconst addReactByNormalizr = (\n  draft: Draft<CommentReactDataState>,\n  action: LoadDataActionTypes\n) => {\n  const {\n    payload: { commentReacts }\n  } = action\n  Object.keys(commentReacts).forEach(id => {\n    draft[id] = commentReacts[id]\n  })\n}\n\nconst addReact = (\n  draft: Draft<CommentReactDataState>,\n  action: CommentReactActionTypes\n) => {\n  const { payload } = action as CommentReact\n  draft[payload.id] = payload\n}\n\nconst removeReact = (\n  draft: Draft<CommentReactDataState>,\n  action: CommentReactActionTypes\n) => {\n  const {\n    payload: { id }\n  } = action\n  delete draft[id]\n}\n\nconst reactsById = produce((draft, action) => {\n  switch (action.type) {\n    case LOAD_DATA:\n      addReactByNormalizr(draft, action)\n      break\n    case FEEDBACK.COMMENT_REACT:\n      addReact(draft, action)\n      break\n    case FEEDBACK.UNDO_COMMENT_REACT:\n      removeReact(draft, action)\n      break\n    default:\n  }\n}, {})\n\nconst addReactIdByNormalizr = (\n  draft: Draft<AllIdsDataState>,\n  action: LoadDataActionTypes\n) => {\n  const {\n    type,\n    payload: { commentReacts }\n  } = action\n  // Extract object and append all its react's ID to the list of allIds\n  Object.keys(commentReacts).forEach(id => {\n    draft.items.push(id)\n  })\n  switch (type) {\n    case REQUEST_LODA_DATA:\n      draft.isFetching = true\n      break\n    case LOAD_DATA:\n      draft.isFetching = false\n      break\n    default:\n  }\n}\n\nconst addReactId = (\n  draft: Draft<AllIdsDataState>,\n  action: CommentReactActionTypes\n) => {\n  const {\n    payload: { id }\n  } = action\n  // Prepend the new react's ID to the list of allIds\n  draft.items.unshift(id)\n}\n\nconst removeReactId = (\n  draft: Draft<AllIdsDataState>,\n  action: CommentReactActionTypes\n) => {\n  const {\n    payload: { id }\n  } = action\n  // Remove the react's ID from the list of allIds\n  draft.items.splice(draft.items.findIndex(reactId => reactId === id), 1)\n}\n\nconst allReact = produce(\n  (draft, action) => {\n    switch (action.type) {\n      case REQUEST_LODA_DATA:\n      case LOAD_DATA:\n        addReactIdByNormalizr(draft, action)\n        break\n      case FEEDBACK.COMMENT_REACT:\n        addReactId(draft, action)\n        break\n      case FEEDBACK.UNDO_COMMENT_REACT:\n        removeReactId(draft, action)\n        break\n      default:\n    }\n  },\n  { items: [], isFetching: false }\n)\n\nconst commentReactReducer = combineReducers({\n  byId: reactsById,\n  allIds: allReact\n})\n\nexport default commentReactReducer\n","import { combineReducers } from 'redux'\nimport produce, { Draft } from 'immer'\nimport {\n  REQUEST_LODA_DATA,\n  LOAD_DATA,\n  FEEDBACK,\n  CommentActionTypes,\n  Comment,\n  UpdateComment\n} from '../actions/types'\nimport { LoadDataActionTypes } from './types'\nimport { CommentDataState, AllIdsDataState } from './types'\n\nconst addCommentByNormalizr = (\n  draft: Draft<CommentDataState>,\n  action: LoadDataActionTypes\n) => {\n  const {\n    payload: { comments }\n  } = action\n  Object.keys(comments).forEach(id => {\n    draft[id] = comments[id]\n  })\n}\n\nconst addComment = (\n  draft: Draft<CommentDataState>,\n  action: CommentActionTypes\n) => {\n  const { payload } = action as Comment\n  draft[payload.id] = payload\n}\n\nconst removeComment = (\n  draft: Draft<CommentDataState>,\n  action: CommentActionTypes\n) => {\n  const {\n    payload: { id }\n  } = action\n  delete draft[id]\n}\n\nconst updateComment = (\n  draft: Draft<CommentDataState>,\n  action: CommentActionTypes\n) => {\n  const {\n    payload: { id, saying }\n  } = action as UpdateComment\n  draft[id].saying = saying\n}\n\nconst toggleCommentVisibility = (\n  draft: Draft<CommentDataState>,\n  action: CommentActionTypes\n) => {\n  const {\n    payload: { id }\n  } = action\n  const currentVisibility = draft[id].isHidden\n  draft[id].isHidden = !currentVisibility\n}\n\nconst commentsById = produce((draft, action) => {\n  switch (action.type) {\n    case LOAD_DATA:\n      addCommentByNormalizr(draft, action)\n      break\n    case FEEDBACK.COMMENT:\n      addComment(draft, action)\n      break\n    case FEEDBACK.UNDO_COMMENT:\n      removeComment(draft, action)\n      break\n    case FEEDBACK.UPDATE_COMMENT:\n      updateComment(draft, action)\n      break\n    case FEEDBACK.COMMENT_VISIBILITY_TOGGLE:\n      toggleCommentVisibility(draft, action)\n      break\n    default:\n  }\n}, {})\n\nconst addCommentIdByNormalizr = (\n  draft: Draft<AllIdsDataState>,\n  action: LoadDataActionTypes\n) => {\n  const {\n    type,\n    payload: { comments }\n  } = action\n  // Extract object and append all its comments's ID to the list of allIds.items\n  Object.keys(comments).forEach(id => {\n    draft.items.push(id)\n  })\n  switch (type) {\n    case REQUEST_LODA_DATA:\n      draft.isFetching = true\n      break\n    case LOAD_DATA:\n      draft.isFetching = false\n      break\n    default:\n  }\n}\n\nconst addCommentId = (\n  draft: Draft<AllIdsDataState>,\n  action: CommentActionTypes\n) => {\n  const {\n    payload: { id }\n  } = action as Comment\n  // Prepend the new comments's ID to the list of allIds.items\n  draft.items.unshift(id)\n}\n\nconst removeCommentId = (\n  draft: Draft<AllIdsDataState>,\n  action: CommentActionTypes\n) => {\n  const {\n    payload: { id }\n  } = action\n  // Remove the comment's ID from the list of allIds.items\n  draft.items.splice(draft.items.findIndex(itemId => itemId === id), 1)\n}\n\nconst allComment = produce(\n  (draft, action) => {\n    switch (action.type) {\n      case REQUEST_LODA_DATA:\n      case LOAD_DATA:\n        addCommentIdByNormalizr(draft, action)\n        break\n      case FEEDBACK.COMMENT:\n        addCommentId(draft, action)\n        break\n      case FEEDBACK.UNDO_COMMENT:\n        removeCommentId(draft, action)\n        break\n      default:\n    }\n  },\n  { items: [], isFetching: false }\n)\n\nconst commentReducer = combineReducers({\n  byId: commentsById,\n  allIds: allComment\n})\n\nexport default commentReducer\n","import { combineReducers } from 'redux'\nimport produce, { Draft } from 'immer'\nimport {\n  REQUEST_LODA_DATA,\n  LOAD_DATA,\n  FEEDBACK,\n  ShareActionTypes,\n  Share\n} from '../actions/types'\nimport { LoadDataActionTypes } from './types'\nimport { ShareDataState, AllIdsDataState } from './types'\n\nconst addShareByNormalizr = (\n  draft: Draft<ShareDataState>,\n  action: LoadDataActionTypes\n) => {\n  const {\n    payload: { shares }\n  } = action\n  Object.keys(shares).forEach(id => {\n    draft[id] = shares[id]\n  })\n}\n\nconst addShare = (draft: Draft<ShareDataState>, action: ShareActionTypes) => {\n  const { payload } = action as Share\n  draft[payload.id] = payload\n}\n\nconst sharesById = produce((draft, action) => {\n  switch (action.type) {\n    case LOAD_DATA:\n      addShareByNormalizr(draft, action)\n      break\n    case FEEDBACK.SHARE:\n      addShare(draft, action)\n      break\n    default:\n  }\n}, {})\n\nconst addShareIdByNormalizr = (\n  draft: Draft<AllIdsDataState>,\n  action: LoadDataActionTypes\n) => {\n  const {\n    type,\n    payload: { shares }\n  } = action\n  Object.keys(shares).forEach(id => {\n    draft.items.push(id)\n  })\n  switch (type) {\n    case REQUEST_LODA_DATA:\n      draft.isFetching = true\n      break\n    case LOAD_DATA:\n      draft.isFetching = false\n      break\n    default:\n  }\n}\n\nconst addShareId = (\n  draft: Draft<AllIdsDataState>,\n  action: ShareActionTypes\n) => {\n  const {\n    payload: { id }\n  } = action\n  // Prepend the new react's ID to the list of allIds\n  draft.items.unshift(id)\n}\n\nconst allShare = produce(\n  (draft, action) => {\n    switch (action.type) {\n      case REQUEST_LODA_DATA:\n      case LOAD_DATA:\n        addShareIdByNormalizr(draft, action)\n        break\n      case FEEDBACK.SHARE:\n        addShareId(draft, action)\n        break\n      default:\n    }\n  },\n  { items: [], isFetching: false }\n)\n\nconst shareReducer = combineReducers({\n  byId: sharesById,\n  allIds: allShare\n})\n\nexport default shareReducer\n","import { combineReducers } from 'redux'\nimport reactReducer from './react'\nimport commentReactReducer from './commentReact'\nimport commentReducer from './comment'\nimport shareReducer from './share'\n\nconst rootReducer = combineReducers({\n  reacts: reactReducer,\n  commentReacts: commentReactReducer,\n  comments: commentReducer,\n  shares: shareReducer\n})\n\nexport default rootReducer\n","import { createStore, applyMiddleware } from 'redux'\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly'\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducer from './reducers'\n\nconst configureStore = (preloadedState: any) => {\n  const sagaMiddleware = createSagaMiddleware()\n  return {\n    ...createStore(\n      rootReducer,\n      preloadedState,\n      composeWithDevTools(applyMiddleware(sagaMiddleware))\n    ),\n    runSaga: sagaMiddleware.run\n  }\n}\n\nexport default configureStore\n","import { put, call, fork, all, takeLatest, delay } from 'redux-saga/effects'\nimport axios from 'axios'\nimport { REQUEST_LODA_DATA } from '../actions/types'\nimport { requestLoadData, loadData } from '../actions'\n\n// request delay for shimmer animation run properly\n// when async promise request finishes too quick\nconst requestDelay = delay(2000)\n\nexport function* fetchPostApi(endPoint: string) {\n  const result = yield axios\n    .get(`api/${endPoint}.json`)\n    .then(response => response.data)\n    .then(json => json.data)\n    .catch(err => console.log('A fetch err occurs: ', err))\n  return result\n}\n\nexport function* requestFetchPost() {\n  const [, result] = yield all([requestDelay, call(fetchPostApi, 'db')])\n  yield put(loadData(result))\n}\n\nexport function* startup() {\n  yield put(requestLoadData())\n}\n\nexport default function* root() {\n  yield fork(startup)\n  yield takeLatest(REQUEST_LODA_DATA, requestFetchPost)\n}\n","/* eslint-disable global-require */\n/* eslint import/no-webpack-loader-syntax: off */\n// As of Babel 7.4.0, this package has been deprecated in favor of directly\n// including core-js/stable (to polyfill ECMAScript features)\n// and regenerator-runtime/runtime (needed to use transpiled generator functions):\n// import 'core-js/stable'\n// import 'regenerator-runtime/runtime'\n// ref: https://babeljs.io/docs/en/babel-polyfill\n// import 'regenerator-runtime/runtime'\n// import 'core-js/stable/object/keys'\n// import 'core-js/stable/array/is-array'\n// import 'core-js/stable/array/for-each'\n// import 'core-js/stable/array/sort'\n// import 'core-js/stable/array/filter'\n// import 'core-js/stable/array/map'\n// import 'core-js/stable/array/reduce'\n// import 'core-js/stable/string/replace'\n// import 'core-js/stable/string/split'\n// import 'core-js/stable/string/includes'\n// import 'core-js/stable/string/starts-with'\n// import 'core-js/stable/number/to-fixed'\n// import 'core-js/stable/date/now'\nimport React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport configureStore from './configureStore'\nimport { definedUsers } from './utils/dataMock'\nimport rootSaga from './sagas'\n\nconst store = configureStore({})\nstore.runSaga(rootSaga)\n\nconst post = {\n  id: 'POST',\n  user: definedUsers.theMazu,\n  time: 1555495920000,\n  // UNIX-timestamp in milli-sec for local time: 2019/04/17 18:12:00\n  content: '我根本沒說。',\n  title: 'I did not say that shit.'\n}\n\nconst App = React.lazy(() => import('./components/App'))\n\nReactDOM.render(\n  <Provider store={store}>\n    <Suspense fallback={<div>Loading...</div>}>\n      <App postData={post} />\n    </Suspense>\n  </Provider>,\n  document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}